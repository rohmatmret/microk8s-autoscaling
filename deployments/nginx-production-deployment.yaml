apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-production
  namespace: default
  labels:
    app: nginx-production
    version: v1.0.0
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: nginx-production
  template:
    metadata:
      labels:
        app: nginx-production
        version: v1.0.0
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      # Security: Run as non-root user (nginx user in nginx image)
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
      # Pod disruption budget for high availability
      terminationGracePeriodSeconds: 30
      # Anti-affinity for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nginx-production
              topologyKey: kubernetes.io/hostname
      containers:
        - name: nginx
          image: nginx:1.25
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "1000m"
              memory: "512Mi"
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false  # nginx needs to write logs
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: nginx-logs
              mountPath: /var/log/nginx
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-temp
              mountPath: /var/lib/nginx
        - name: nginx-exporter
          image: nginx/nginx-prometheus-exporter:0.11.0
          args:
            - "-nginx.scrape-uri=http://127.0.0.1/nginx_status"
            - "-nginx.ssl-verify=false"
          ports:
            - name: metrics
              containerPort: 9113
              protocol: TCP
          resources:
            requests:
              cpu: "10m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "64Mi"
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9113
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9113
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-production-config
        - name: nginx-logs
          emptyDir: {}
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-temp
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-production
  namespace: default
  labels:
    app: nginx-production
    environment: production
spec:
  selector:
    app: nginx-production
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: metrics
      port: 9113
      targetPort: 9113
      protocol: TCP
  type: ClusterIP
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nginx-production-pdb
  namespace: default
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: nginx-production 